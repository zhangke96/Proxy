// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Head_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, body_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Head_descriptor_ = file->message_type(1);
  static const int Head_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, random_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, flow_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, source_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, dest_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, call_purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, auth_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, session_key_),
  };
  Head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Head_descriptor_,
      Head::default_instance_,
      Head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Head));
  Body_descriptor_ = file->message_type(2);
  static const int Body_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, listen_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, listen_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, pong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, logout_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, logout_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, new_connection_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, new_connection_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, close_connection_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, close_connection_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, data_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, data_response_),
  };
  Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Body));
  ResponseCode_descriptor_ = file->message_type(3);
  static const int ResponseCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCode, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCode, error_message_),
  };
  ResponseCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCode_descriptor_,
      ResponseCode::default_instance_,
      ResponseCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCode));
  ListenRequest_descriptor_ = file->message_type(4);
  static const int ListenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, self_ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, self_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, self_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, listen_port_),
  };
  ListenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListenRequest_descriptor_,
      ListenRequest::default_instance_,
      ListenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListenRequest));
  ListenResponse_descriptor_ = file->message_type(5);
  static const int ListenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenResponse, session_key_),
  };
  ListenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListenResponse_descriptor_,
      ListenResponse::default_instance_,
      ListenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListenResponse));
  Ping_descriptor_ = file->message_type(6);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, time_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  Pong_descriptor_ = file->message_type(7);
  static const int Pong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, time_),
  };
  Pong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pong_descriptor_,
      Pong::default_instance_,
      Pong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pong));
  LogoutRequest_descriptor_ = file->message_type(8);
  static const int LogoutRequest_offsets_[1] = {
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  LogoutResponse_descriptor_ = file->message_type(9);
  static const int LogoutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, rc_),
  };
  LogoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResponse));
  NewConnectionRequest_descriptor_ = file->message_type(10);
  static const int NewConnectionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, ip_v4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, ip_v6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, conn_key_),
  };
  NewConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewConnectionRequest_descriptor_,
      NewConnectionRequest::default_instance_,
      NewConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewConnectionRequest));
  NewConnectionResponse_descriptor_ = file->message_type(11);
  static const int NewConnectionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionResponse, rc_),
  };
  NewConnectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewConnectionResponse_descriptor_,
      NewConnectionResponse::default_instance_,
      NewConnectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewConnectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewConnectionResponse));
  CloseConnectionRequest_descriptor_ = file->message_type(12);
  static const int CloseConnectionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionRequest, conn_key_),
  };
  CloseConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseConnectionRequest_descriptor_,
      CloseConnectionRequest::default_instance_,
      CloseConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseConnectionRequest));
  CloseConnectionResponse_descriptor_ = file->message_type(13);
  static const int CloseConnectionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionResponse, rc_),
  };
  CloseConnectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseConnectionResponse_descriptor_,
      CloseConnectionResponse::default_instance_,
      CloseConnectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseConnectionResponse));
  DataRequest_descriptor_ = file->message_type(14);
  static const int DataRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, conn_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, data_),
  };
  DataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataRequest_descriptor_,
      DataRequest::default_instance_,
      DataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataRequest));
  DataResponse_descriptor_ = file->message_type(15);
  static const int DataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResponse, rc_),
  };
  DataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResponse_descriptor_,
      DataResponse::default_instance_,
      DataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResponse));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Head_descriptor_, &Head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCode_descriptor_, &ResponseCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListenRequest_descriptor_, &ListenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListenResponse_descriptor_, &ListenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pong_descriptor_, &Pong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResponse_descriptor_, &LogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewConnectionRequest_descriptor_, &NewConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewConnectionResponse_descriptor_, &NewConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseConnectionRequest_descriptor_, &CloseConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseConnectionResponse_descriptor_, &CloseConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataRequest_descriptor_, &DataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResponse_descriptor_, &DataResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Head::default_instance_;
  delete Head_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete ResponseCode::default_instance_;
  delete ResponseCode_reflection_;
  delete ListenRequest::default_instance_;
  delete ListenRequest_reflection_;
  delete ListenResponse::default_instance_;
  delete ListenResponse_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Pong::default_instance_;
  delete Pong_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
  delete NewConnectionRequest::default_instance_;
  delete NewConnectionRequest_reflection_;
  delete NewConnectionResponse::default_instance_;
  delete NewConnectionResponse_reflection_;
  delete CloseConnectionRequest::default_instance_;
  delete CloseConnectionRequest_reflection_;
  delete CloseConnectionResponse::default_instance_;
  delete CloseConnectionResponse_reflection_;
  delete DataRequest::default_instance_;
  delete DataRequest_reflection_;
  delete DataResponse::default_instance_;
  delete DataResponse_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005proto\"\?\n\007Message\022\031\n\004hea"
    "d\030\001 \002(\0132\013.proto.Head\022\031\n\004body\030\002 \002(\0132\013.pro"
    "to.Body\"\273\001\n\004Head\022\017\n\007version\030\001 \002(\r\022\022\n\nran"
    "dom_num\030\002 \002(\r\022\017\n\007flow_no\030\003 \002(\r\022\024\n\014messag"
    "e_type\030\004 \002(\005\022\025\n\rsource_entity\030\005 \002(\r\022\023\n\013d"
    "est_entity\030\006 \001(\r\022\024\n\014call_purpose\030\007 \001(\t\022\020"
    "\n\010auth_key\030\010 \001(\t\022\023\n\013session_key\030\t \001(\004\"\316\004"
    "\n\004Body\022,\n\016listen_request\030\001 \001(\0132\024.proto.L"
    "istenRequest\022.\n\017listen_response\030\002 \001(\0132\025."
    "proto.ListenResponse\022\031\n\004ping\030\003 \001(\0132\013.pro"
    "to.Ping\022\031\n\004pong\030\004 \001(\0132\013.proto.Pong\022,\n\016lo"
    "gout_request\030\005 \001(\0132\024.proto.LogoutRequest"
    "\022.\n\017logout_response\030\006 \001(\0132\025.proto.Logout"
    "Response\022;\n\026new_connection_request\030\007 \001(\013"
    "2\033.proto.NewConnectionRequest\022=\n\027new_con"
    "nection_response\030\010 \001(\0132\034.proto.NewConnec"
    "tionResponse\022\?\n\030close_connection_request"
    "\030\t \001(\0132\035.proto.CloseConnectionRequest\022A\n"
    "\031close_connection_response\030\n \001(\0132\036.proto"
    ".CloseConnectionResponse\022(\n\014data_request"
    "\030\013 \001(\0132\022.proto.DataRequest\022*\n\rdata_respo"
    "nse\030\014 \001(\0132\023.proto.DataResponse\"6\n\014Respon"
    "seCode\022\017\n\007retcode\030\001 \002(\005\022\025\n\rerror_message"
    "\030\002 \001(\t\"]\n\rListenRequest\022\021\n\tself_ipv4\030\001 \001"
    "(\r\022\021\n\tself_ipv6\030\002 \003(\014\022\021\n\tself_port\030\003 \002(\r"
    "\022\023\n\013listen_port\030\004 \002(\r\"F\n\016ListenResponse\022"
    "\037\n\002rc\030\001 \002(\0132\023.proto.ResponseCode\022\023\n\013sess"
    "ion_key\030\002 \001(\004\"\024\n\004Ping\022\014\n\004time\030\001 \002(\004\"5\n\004P"
    "ong\022\037\n\002rc\030\001 \002(\0132\023.proto.ResponseCode\022\014\n\004"
    "time\030\002 \002(\004\"\017\n\rLogoutRequest\"1\n\016LogoutRes"
    "ponse\022\037\n\002rc\030\001 \002(\0132\023.proto.ResponseCode\"T"
    "\n\024NewConnectionRequest\022\r\n\005ip_v4\030\001 \001(\r\022\r\n"
    "\005ip_v6\030\002 \003(\014\022\014\n\004port\030\003 \002(\r\022\020\n\010conn_key\030\004"
    " \002(\004\"8\n\025NewConnectionResponse\022\037\n\002rc\030\001 \002("
    "\0132\023.proto.ResponseCode\"*\n\026CloseConnectio"
    "nRequest\022\020\n\010conn_key\030\001 \002(\004\":\n\027CloseConne"
    "ctionResponse\022\037\n\002rc\030\001 \002(\0132\023.proto.Respon"
    "seCode\"-\n\013DataRequest\022\020\n\010conn_key\030\001 \002(\004\022"
    "\014\n\004data\030\002 \002(\t\"/\n\014DataResponse\022\037\n\002rc\030\001 \002("
    "\0132\023.proto.ResponseCode*\215\002\n\013MessageType\022\022"
    "\n\016LISTEN_REQUEST\020\001\022\023\n\017LISTEN_RESPONSE\020\002\022"
    "\010\n\004PING\020\003\022\010\n\004PONG\020\004\022\022\n\016LOGOUT_REQUEST\020\005\022"
    "\023\n\017LOGOUT_RESPONSE\020\006\022\032\n\026NEW_CONNECTION_R"
    "EQUEST\020\007\022\033\n\027NEW_CONNECTION_RESPONSE\020\010\022\034\n"
    "\030CLOSE_CONNECTION_REQUEST\020\t\022\034\n\030CLOSE_CON"
    "NECTION_RESONSE\020\n\022\020\n\014DATA_REQUEST\020\013\022\021\n\rD"
    "ATA_RESPONSE\020\014", 1854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Head::default_instance_ = new Head();
  Body::default_instance_ = new Body();
  ResponseCode::default_instance_ = new ResponseCode();
  ListenRequest::default_instance_ = new ListenRequest();
  ListenResponse::default_instance_ = new ListenResponse();
  Ping::default_instance_ = new Ping();
  Pong::default_instance_ = new Pong();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  NewConnectionRequest::default_instance_ = new NewConnectionRequest();
  NewConnectionResponse::default_instance_ = new NewConnectionResponse();
  CloseConnectionRequest::default_instance_ = new CloseConnectionRequest();
  CloseConnectionResponse::default_instance_ = new CloseConnectionResponse();
  DataRequest::default_instance_ = new DataRequest();
  DataResponse::default_instance_ = new DataResponse();
  Message::default_instance_->InitAsDefaultInstance();
  Head::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  ResponseCode::default_instance_->InitAsDefaultInstance();
  ListenRequest::default_instance_->InitAsDefaultInstance();
  ListenResponse::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Pong::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  NewConnectionRequest::default_instance_->InitAsDefaultInstance();
  NewConnectionResponse::default_instance_->InitAsDefaultInstance();
  CloseConnectionRequest::default_instance_->InitAsDefaultInstance();
  CloseConnectionResponse::default_instance_->InitAsDefaultInstance();
  DataRequest::default_instance_->InitAsDefaultInstance();
  DataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kHeadFieldNumber;
const int Message::kBodyFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  head_ = const_cast< ::proto::Head*>(&::proto::Head::default_instance());
  body_ = const_cast< ::proto::Body*>(&::proto::Body::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::proto::Head::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::proto::Body::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.Head head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .proto.Body body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.Head head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .proto.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.Head head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .proto.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.Head head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .proto.Body body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::proto::Head::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::proto::Body::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Head::kVersionFieldNumber;
const int Head::kRandomNumFieldNumber;
const int Head::kFlowNoFieldNumber;
const int Head::kMessageTypeFieldNumber;
const int Head::kSourceEntityFieldNumber;
const int Head::kDestEntityFieldNumber;
const int Head::kCallPurposeFieldNumber;
const int Head::kAuthKeyFieldNumber;
const int Head::kSessionKeyFieldNumber;
#endif  // !_MSC_VER

Head::Head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Head::InitAsDefaultInstance() {
}

Head::Head(const Head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Head::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  random_num_ = 0u;
  flow_no_ = 0u;
  message_type_ = 0;
  source_entity_ = 0u;
  dest_entity_ = 0u;
  call_purpose_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Head::~Head() {
  SharedDtor();
}

void Head::SharedDtor() {
  if (call_purpose_ != &::google::protobuf::internal::kEmptyString) {
    delete call_purpose_;
  }
  if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_key_;
  }
  if (this != default_instance_) {
  }
}

void Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Head_descriptor_;
}

const Head& Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Head* Head::default_instance_ = NULL;

Head* Head::New() const {
  return new Head;
}

void Head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    random_num_ = 0u;
    flow_no_ = 0u;
    message_type_ = 0;
    source_entity_ = 0u;
    dest_entity_ = 0u;
    if (has_call_purpose()) {
      if (call_purpose_ != &::google::protobuf::internal::kEmptyString) {
        call_purpose_->clear();
      }
    }
    if (has_auth_key()) {
      if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
        auth_key_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    session_key_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_random_num;
        break;
      }

      // required uint32 random_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_num_)));
          set_has_random_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flow_no;
        break;
      }

      // required uint32 flow_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flow_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flow_no_)));
          set_has_flow_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_message_type;
        break;
      }

      // required int32 message_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_entity;
        break;
      }

      // required uint32 source_entity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_entity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_entity_)));
          set_has_source_entity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dest_entity;
        break;
      }

      // optional uint32 dest_entity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_entity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_entity_)));
          set_has_dest_entity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_call_purpose;
        break;
      }

      // optional string call_purpose = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_purpose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_purpose()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->call_purpose().data(), this->call_purpose().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_auth_key;
        break;
      }

      // optional string auth_key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_key().data(), this->auth_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_session_key;
        break;
      }

      // optional uint64 session_key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_key_)));
          set_has_session_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 random_num = 2;
  if (has_random_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->random_num(), output);
  }

  // required uint32 flow_no = 3;
  if (has_flow_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flow_no(), output);
  }

  // required int32 message_type = 4;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->message_type(), output);
  }

  // required uint32 source_entity = 5;
  if (has_source_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_entity(), output);
  }

  // optional uint32 dest_entity = 6;
  if (has_dest_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dest_entity(), output);
  }

  // optional string call_purpose = 7;
  if (has_call_purpose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->call_purpose().data(), this->call_purpose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->call_purpose(), output);
  }

  // optional string auth_key = 8;
  if (has_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_key().data(), this->auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->auth_key(), output);
  }

  // optional uint64 session_key = 9;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->session_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 random_num = 2;
  if (has_random_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->random_num(), target);
  }

  // required uint32 flow_no = 3;
  if (has_flow_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flow_no(), target);
  }

  // required int32 message_type = 4;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->message_type(), target);
  }

  // required uint32 source_entity = 5;
  if (has_source_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_entity(), target);
  }

  // optional uint32 dest_entity = 6;
  if (has_dest_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dest_entity(), target);
  }

  // optional string call_purpose = 7;
  if (has_call_purpose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->call_purpose().data(), this->call_purpose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->call_purpose(), target);
  }

  // optional string auth_key = 8;
  if (has_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_key().data(), this->auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->auth_key(), target);
  }

  // optional uint64 session_key = 9;
  if (has_session_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->session_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 random_num = 2;
    if (has_random_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_num());
    }

    // required uint32 flow_no = 3;
    if (has_flow_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flow_no());
    }

    // required int32 message_type = 4;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_type());
    }

    // required uint32 source_entity = 5;
    if (has_source_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_entity());
    }

    // optional uint32 dest_entity = 6;
    if (has_dest_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_entity());
    }

    // optional string call_purpose = 7;
    if (has_call_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->call_purpose());
    }

    // optional string auth_key = 8;
    if (has_auth_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_key());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 session_key = 9;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Head::MergeFrom(const Head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_random_num()) {
      set_random_num(from.random_num());
    }
    if (from.has_flow_no()) {
      set_flow_no(from.flow_no());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_source_entity()) {
      set_source_entity(from.source_entity());
    }
    if (from.has_dest_entity()) {
      set_dest_entity(from.dest_entity());
    }
    if (from.has_call_purpose()) {
      set_call_purpose(from.call_purpose());
    }
    if (from.has_auth_key()) {
      set_auth_key(from.auth_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Head::CopyFrom(const Head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Head::Swap(Head* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(random_num_, other->random_num_);
    std::swap(flow_no_, other->flow_no_);
    std::swap(message_type_, other->message_type_);
    std::swap(source_entity_, other->source_entity_);
    std::swap(dest_entity_, other->dest_entity_);
    std::swap(call_purpose_, other->call_purpose_);
    std::swap(auth_key_, other->auth_key_);
    std::swap(session_key_, other->session_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Head_descriptor_;
  metadata.reflection = Head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Body::kListenRequestFieldNumber;
const int Body::kListenResponseFieldNumber;
const int Body::kPingFieldNumber;
const int Body::kPongFieldNumber;
const int Body::kLogoutRequestFieldNumber;
const int Body::kLogoutResponseFieldNumber;
const int Body::kNewConnectionRequestFieldNumber;
const int Body::kNewConnectionResponseFieldNumber;
const int Body::kCloseConnectionRequestFieldNumber;
const int Body::kCloseConnectionResponseFieldNumber;
const int Body::kDataRequestFieldNumber;
const int Body::kDataResponseFieldNumber;
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Body::InitAsDefaultInstance() {
  listen_request_ = const_cast< ::proto::ListenRequest*>(&::proto::ListenRequest::default_instance());
  listen_response_ = const_cast< ::proto::ListenResponse*>(&::proto::ListenResponse::default_instance());
  ping_ = const_cast< ::proto::Ping*>(&::proto::Ping::default_instance());
  pong_ = const_cast< ::proto::Pong*>(&::proto::Pong::default_instance());
  logout_request_ = const_cast< ::proto::LogoutRequest*>(&::proto::LogoutRequest::default_instance());
  logout_response_ = const_cast< ::proto::LogoutResponse*>(&::proto::LogoutResponse::default_instance());
  new_connection_request_ = const_cast< ::proto::NewConnectionRequest*>(&::proto::NewConnectionRequest::default_instance());
  new_connection_response_ = const_cast< ::proto::NewConnectionResponse*>(&::proto::NewConnectionResponse::default_instance());
  close_connection_request_ = const_cast< ::proto::CloseConnectionRequest*>(&::proto::CloseConnectionRequest::default_instance());
  close_connection_response_ = const_cast< ::proto::CloseConnectionResponse*>(&::proto::CloseConnectionResponse::default_instance());
  data_request_ = const_cast< ::proto::DataRequest*>(&::proto::DataRequest::default_instance());
  data_response_ = const_cast< ::proto::DataResponse*>(&::proto::DataResponse::default_instance());
}

Body::Body(const Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  listen_request_ = NULL;
  listen_response_ = NULL;
  ping_ = NULL;
  pong_ = NULL;
  logout_request_ = NULL;
  logout_response_ = NULL;
  new_connection_request_ = NULL;
  new_connection_response_ = NULL;
  close_connection_request_ = NULL;
  close_connection_response_ = NULL;
  data_request_ = NULL;
  data_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
    delete listen_request_;
    delete listen_response_;
    delete ping_;
    delete pong_;
    delete logout_request_;
    delete logout_response_;
    delete new_connection_request_;
    delete new_connection_response_;
    delete close_connection_request_;
    delete close_connection_response_;
    delete data_request_;
    delete data_response_;
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New() const {
  return new Body;
}

void Body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_listen_request()) {
      if (listen_request_ != NULL) listen_request_->::proto::ListenRequest::Clear();
    }
    if (has_listen_response()) {
      if (listen_response_ != NULL) listen_response_->::proto::ListenResponse::Clear();
    }
    if (has_ping()) {
      if (ping_ != NULL) ping_->::proto::Ping::Clear();
    }
    if (has_pong()) {
      if (pong_ != NULL) pong_->::proto::Pong::Clear();
    }
    if (has_logout_request()) {
      if (logout_request_ != NULL) logout_request_->::proto::LogoutRequest::Clear();
    }
    if (has_logout_response()) {
      if (logout_response_ != NULL) logout_response_->::proto::LogoutResponse::Clear();
    }
    if (has_new_connection_request()) {
      if (new_connection_request_ != NULL) new_connection_request_->::proto::NewConnectionRequest::Clear();
    }
    if (has_new_connection_response()) {
      if (new_connection_response_ != NULL) new_connection_response_->::proto::NewConnectionResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_close_connection_request()) {
      if (close_connection_request_ != NULL) close_connection_request_->::proto::CloseConnectionRequest::Clear();
    }
    if (has_close_connection_response()) {
      if (close_connection_response_ != NULL) close_connection_response_->::proto::CloseConnectionResponse::Clear();
    }
    if (has_data_request()) {
      if (data_request_ != NULL) data_request_->::proto::DataRequest::Clear();
    }
    if (has_data_response()) {
      if (data_response_ != NULL) data_response_->::proto::DataResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ListenRequest listen_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listen_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_listen_response;
        break;
      }

      // optional .proto.ListenResponse listen_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listen_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listen_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ping;
        break;
      }

      // optional .proto.Ping ping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pong;
        break;
      }

      // optional .proto.Pong pong = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logout_request;
        break;
      }

      // optional .proto.LogoutRequest logout_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_logout_response;
        break;
      }

      // optional .proto.LogoutResponse logout_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_connection_request;
        break;
      }

      // optional .proto.NewConnectionRequest new_connection_request = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_connection_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_connection_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_new_connection_response;
        break;
      }

      // optional .proto.NewConnectionResponse new_connection_response = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_connection_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_connection_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_close_connection_request;
        break;
      }

      // optional .proto.CloseConnectionRequest close_connection_request = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close_connection_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_connection_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_close_connection_response;
        break;
      }

      // optional .proto.CloseConnectionResponse close_connection_response = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close_connection_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_connection_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_data_request;
        break;
      }

      // optional .proto.DataRequest data_request = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_data_response;
        break;
      }

      // optional .proto.DataResponse data_response = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.ListenRequest listen_request = 1;
  if (has_listen_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listen_request(), output);
  }

  // optional .proto.ListenResponse listen_response = 2;
  if (has_listen_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->listen_response(), output);
  }

  // optional .proto.Ping ping = 3;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ping(), output);
  }

  // optional .proto.Pong pong = 4;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pong(), output);
  }

  // optional .proto.LogoutRequest logout_request = 5;
  if (has_logout_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logout_request(), output);
  }

  // optional .proto.LogoutResponse logout_response = 6;
  if (has_logout_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logout_response(), output);
  }

  // optional .proto.NewConnectionRequest new_connection_request = 7;
  if (has_new_connection_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_connection_request(), output);
  }

  // optional .proto.NewConnectionResponse new_connection_response = 8;
  if (has_new_connection_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->new_connection_response(), output);
  }

  // optional .proto.CloseConnectionRequest close_connection_request = 9;
  if (has_close_connection_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->close_connection_request(), output);
  }

  // optional .proto.CloseConnectionResponse close_connection_response = 10;
  if (has_close_connection_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->close_connection_response(), output);
  }

  // optional .proto.DataRequest data_request = 11;
  if (has_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data_request(), output);
  }

  // optional .proto.DataResponse data_response = 12;
  if (has_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->data_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.ListenRequest listen_request = 1;
  if (has_listen_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->listen_request(), target);
  }

  // optional .proto.ListenResponse listen_response = 2;
  if (has_listen_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->listen_response(), target);
  }

  // optional .proto.Ping ping = 3;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ping(), target);
  }

  // optional .proto.Pong pong = 4;
  if (has_pong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pong(), target);
  }

  // optional .proto.LogoutRequest logout_request = 5;
  if (has_logout_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->logout_request(), target);
  }

  // optional .proto.LogoutResponse logout_response = 6;
  if (has_logout_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logout_response(), target);
  }

  // optional .proto.NewConnectionRequest new_connection_request = 7;
  if (has_new_connection_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_connection_request(), target);
  }

  // optional .proto.NewConnectionResponse new_connection_response = 8;
  if (has_new_connection_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->new_connection_response(), target);
  }

  // optional .proto.CloseConnectionRequest close_connection_request = 9;
  if (has_close_connection_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->close_connection_request(), target);
  }

  // optional .proto.CloseConnectionResponse close_connection_response = 10;
  if (has_close_connection_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->close_connection_response(), target);
  }

  // optional .proto.DataRequest data_request = 11;
  if (has_data_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->data_request(), target);
  }

  // optional .proto.DataResponse data_response = 12;
  if (has_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->data_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.ListenRequest listen_request = 1;
    if (has_listen_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listen_request());
    }

    // optional .proto.ListenResponse listen_response = 2;
    if (has_listen_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listen_response());
    }

    // optional .proto.Ping ping = 3;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .proto.Pong pong = 4;
    if (has_pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong());
    }

    // optional .proto.LogoutRequest logout_request = 5;
    if (has_logout_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_request());
    }

    // optional .proto.LogoutResponse logout_response = 6;
    if (has_logout_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_response());
    }

    // optional .proto.NewConnectionRequest new_connection_request = 7;
    if (has_new_connection_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_connection_request());
    }

    // optional .proto.NewConnectionResponse new_connection_response = 8;
    if (has_new_connection_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_connection_response());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.CloseConnectionRequest close_connection_request = 9;
    if (has_close_connection_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close_connection_request());
    }

    // optional .proto.CloseConnectionResponse close_connection_response = 10;
    if (has_close_connection_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close_connection_response());
    }

    // optional .proto.DataRequest data_request = 11;
    if (has_data_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_request());
    }

    // optional .proto.DataResponse data_response = 12;
    if (has_data_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listen_request()) {
      mutable_listen_request()->::proto::ListenRequest::MergeFrom(from.listen_request());
    }
    if (from.has_listen_response()) {
      mutable_listen_response()->::proto::ListenResponse::MergeFrom(from.listen_response());
    }
    if (from.has_ping()) {
      mutable_ping()->::proto::Ping::MergeFrom(from.ping());
    }
    if (from.has_pong()) {
      mutable_pong()->::proto::Pong::MergeFrom(from.pong());
    }
    if (from.has_logout_request()) {
      mutable_logout_request()->::proto::LogoutRequest::MergeFrom(from.logout_request());
    }
    if (from.has_logout_response()) {
      mutable_logout_response()->::proto::LogoutResponse::MergeFrom(from.logout_response());
    }
    if (from.has_new_connection_request()) {
      mutable_new_connection_request()->::proto::NewConnectionRequest::MergeFrom(from.new_connection_request());
    }
    if (from.has_new_connection_response()) {
      mutable_new_connection_response()->::proto::NewConnectionResponse::MergeFrom(from.new_connection_response());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_close_connection_request()) {
      mutable_close_connection_request()->::proto::CloseConnectionRequest::MergeFrom(from.close_connection_request());
    }
    if (from.has_close_connection_response()) {
      mutable_close_connection_response()->::proto::CloseConnectionResponse::MergeFrom(from.close_connection_response());
    }
    if (from.has_data_request()) {
      mutable_data_request()->::proto::DataRequest::MergeFrom(from.data_request());
    }
    if (from.has_data_response()) {
      mutable_data_response()->::proto::DataResponse::MergeFrom(from.data_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  if (has_listen_request()) {
    if (!this->listen_request().IsInitialized()) return false;
  }
  if (has_listen_response()) {
    if (!this->listen_response().IsInitialized()) return false;
  }
  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pong()) {
    if (!this->pong().IsInitialized()) return false;
  }
  if (has_logout_response()) {
    if (!this->logout_response().IsInitialized()) return false;
  }
  if (has_new_connection_request()) {
    if (!this->new_connection_request().IsInitialized()) return false;
  }
  if (has_new_connection_response()) {
    if (!this->new_connection_response().IsInitialized()) return false;
  }
  if (has_close_connection_request()) {
    if (!this->close_connection_request().IsInitialized()) return false;
  }
  if (has_close_connection_response()) {
    if (!this->close_connection_response().IsInitialized()) return false;
  }
  if (has_data_request()) {
    if (!this->data_request().IsInitialized()) return false;
  }
  if (has_data_response()) {
    if (!this->data_response().IsInitialized()) return false;
  }
  return true;
}

void Body::Swap(Body* other) {
  if (other != this) {
    std::swap(listen_request_, other->listen_request_);
    std::swap(listen_response_, other->listen_response_);
    std::swap(ping_, other->ping_);
    std::swap(pong_, other->pong_);
    std::swap(logout_request_, other->logout_request_);
    std::swap(logout_response_, other->logout_response_);
    std::swap(new_connection_request_, other->new_connection_request_);
    std::swap(new_connection_response_, other->new_connection_response_);
    std::swap(close_connection_request_, other->close_connection_request_);
    std::swap(close_connection_response_, other->close_connection_response_);
    std::swap(data_request_, other->data_request_);
    std::swap(data_response_, other->data_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCode::kRetcodeFieldNumber;
const int ResponseCode::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ResponseCode::ResponseCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCode::InitAsDefaultInstance() {
}

ResponseCode::ResponseCode(const ResponseCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCode::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCode::~ResponseCode() {
  SharedDtor();
}

void ResponseCode::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCode_descriptor_;
}

const ResponseCode& ResponseCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ResponseCode* ResponseCode::default_instance_ = NULL;

ResponseCode* ResponseCode::New() const {
  return new ResponseCode;
}

void ResponseCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCode::MergeFrom(const ResponseCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCode::CopyFrom(const ResponseCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseCode::Swap(ResponseCode* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCode_descriptor_;
  metadata.reflection = ResponseCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListenRequest::kSelfIpv4FieldNumber;
const int ListenRequest::kSelfIpv6FieldNumber;
const int ListenRequest::kSelfPortFieldNumber;
const int ListenRequest::kListenPortFieldNumber;
#endif  // !_MSC_VER

ListenRequest::ListenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListenRequest::InitAsDefaultInstance() {
}

ListenRequest::ListenRequest(const ListenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListenRequest::SharedCtor() {
  _cached_size_ = 0;
  self_ipv4_ = 0u;
  self_port_ = 0u;
  listen_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListenRequest::~ListenRequest() {
  SharedDtor();
}

void ListenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenRequest_descriptor_;
}

const ListenRequest& ListenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ListenRequest* ListenRequest::default_instance_ = NULL;

ListenRequest* ListenRequest::New() const {
  return new ListenRequest;
}

void ListenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    self_ipv4_ = 0u;
    self_port_ = 0u;
    listen_port_ = 0u;
  }
  self_ipv6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 self_ipv4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_ipv4_)));
          set_has_self_ipv4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_ipv6;
        break;
      }

      // repeated bytes self_ipv6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_self_ipv6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_ipv6;
        if (input->ExpectTag(24)) goto parse_self_port;
        break;
      }

      // required uint32 self_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_port_)));
          set_has_self_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_listen_port;
        break;
      }

      // required uint32 listen_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 self_ipv4 = 1;
  if (has_self_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->self_ipv4(), output);
  }

  // repeated bytes self_ipv6 = 2;
  for (int i = 0; i < this->self_ipv6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->self_ipv6(i), output);
  }

  // required uint32 self_port = 3;
  if (has_self_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->self_port(), output);
  }

  // required uint32 listen_port = 4;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->listen_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 self_ipv4 = 1;
  if (has_self_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->self_ipv4(), target);
  }

  // repeated bytes self_ipv6 = 2;
  for (int i = 0; i < this->self_ipv6_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->self_ipv6(i), target);
  }

  // required uint32 self_port = 3;
  if (has_self_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->self_port(), target);
  }

  // required uint32 listen_port = 4;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->listen_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 self_ipv4 = 1;
    if (has_self_ipv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_ipv4());
    }

    // required uint32 self_port = 3;
    if (has_self_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_port());
    }

    // required uint32 listen_port = 4;
    if (has_listen_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port());
    }

  }
  // repeated bytes self_ipv6 = 2;
  total_size += 1 * this->self_ipv6_size();
  for (int i = 0; i < this->self_ipv6_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->self_ipv6(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListenRequest::MergeFrom(const ListenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_ipv6_.MergeFrom(from.self_ipv6_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_ipv4()) {
      set_self_ipv4(from.self_ipv4());
    }
    if (from.has_self_port()) {
      set_self_port(from.self_port());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenRequest::CopyFrom(const ListenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void ListenRequest::Swap(ListenRequest* other) {
  if (other != this) {
    std::swap(self_ipv4_, other->self_ipv4_);
    self_ipv6_.Swap(&other->self_ipv6_);
    std::swap(self_port_, other->self_port_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListenRequest_descriptor_;
  metadata.reflection = ListenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListenResponse::kRcFieldNumber;
const int ListenResponse::kSessionKeyFieldNumber;
#endif  // !_MSC_VER

ListenResponse::ListenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListenResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

ListenResponse::ListenResponse(const ListenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListenResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  session_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListenResponse::~ListenResponse() {
  SharedDtor();
}

void ListenResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void ListenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenResponse_descriptor_;
}

const ListenResponse& ListenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ListenResponse* ListenResponse::default_instance_ = NULL;

ListenResponse* ListenResponse::New() const {
  return new ListenResponse;
}

void ListenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
    session_key_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_key;
        break;
      }

      // optional uint64 session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_key_)));
          set_has_session_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  // optional uint64 session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  // optional uint64 session_key = 2;
  if (has_session_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

    // optional uint64 session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListenResponse::MergeFrom(const ListenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenResponse::CopyFrom(const ListenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void ListenResponse::Swap(ListenResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(session_key_, other->session_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListenResponse_descriptor_;
  metadata.reflection = ListenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kTimeFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pong::kRcFieldNumber;
const int Pong::kTimeFieldNumber;
#endif  // !_MSC_VER

Pong::Pong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pong::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pong::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pong::~Pong() {
  SharedDtor();
}

void Pong::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pong_descriptor_;
}

const Pong& Pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Pong* Pong::default_instance_ = NULL;

Pong* Pong::New() const {
  return new Pong;
}

void Pong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void Pong::Swap(Pong* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pong_descriptor_;
  metadata.reflection = Pong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResponse::kRcFieldNumber;
#endif  // !_MSC_VER

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponse::~LogoutResponse() {
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New() const {
  return new LogoutResponse;
}

void LogoutResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewConnectionRequest::kIpV4FieldNumber;
const int NewConnectionRequest::kIpV6FieldNumber;
const int NewConnectionRequest::kPortFieldNumber;
const int NewConnectionRequest::kConnKeyFieldNumber;
#endif  // !_MSC_VER

NewConnectionRequest::NewConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewConnectionRequest::InitAsDefaultInstance() {
}

NewConnectionRequest::NewConnectionRequest(const NewConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewConnectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_v4_ = 0u;
  port_ = 0u;
  conn_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewConnectionRequest::~NewConnectionRequest() {
  SharedDtor();
}

void NewConnectionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewConnectionRequest_descriptor_;
}

const NewConnectionRequest& NewConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NewConnectionRequest* NewConnectionRequest::default_instance_ = NULL;

NewConnectionRequest* NewConnectionRequest::New() const {
  return new NewConnectionRequest;
}

void NewConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_v4_ = 0u;
    port_ = 0u;
    conn_key_ = GOOGLE_ULONGLONG(0);
  }
  ip_v6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip_v4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_v4_)));
          set_has_ip_v4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_v6;
        break;
      }

      // repeated bytes ip_v6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_v6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_ip_v6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_v6;
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conn_key;
        break;
      }

      // required uint64 conn_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_key_)));
          set_has_conn_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ip_v4 = 1;
  if (has_ip_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip_v4(), output);
  }

  // repeated bytes ip_v6 = 2;
  for (int i = 0; i < this->ip_v6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip_v6(i), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required uint64 conn_key = 4;
  if (has_conn_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->conn_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip_v4 = 1;
  if (has_ip_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip_v4(), target);
  }

  // repeated bytes ip_v6 = 2;
  for (int i = 0; i < this->ip_v6_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->ip_v6(i), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required uint64 conn_key = 4;
  if (has_conn_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->conn_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip_v4 = 1;
    if (has_ip_v4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_v4());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint64 conn_key = 4;
    if (has_conn_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_key());
    }

  }
  // repeated bytes ip_v6 = 2;
  total_size += 1 * this->ip_v6_size();
  for (int i = 0; i < this->ip_v6_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->ip_v6(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewConnectionRequest::MergeFrom(const NewConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_v6_.MergeFrom(from.ip_v6_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_v4()) {
      set_ip_v4(from.ip_v4());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_conn_key()) {
      set_conn_key(from.conn_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewConnectionRequest::CopyFrom(const NewConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void NewConnectionRequest::Swap(NewConnectionRequest* other) {
  if (other != this) {
    std::swap(ip_v4_, other->ip_v4_);
    ip_v6_.Swap(&other->ip_v6_);
    std::swap(port_, other->port_);
    std::swap(conn_key_, other->conn_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewConnectionRequest_descriptor_;
  metadata.reflection = NewConnectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewConnectionResponse::kRcFieldNumber;
#endif  // !_MSC_VER

NewConnectionResponse::NewConnectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewConnectionResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

NewConnectionResponse::NewConnectionResponse(const NewConnectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewConnectionResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewConnectionResponse::~NewConnectionResponse() {
  SharedDtor();
}

void NewConnectionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void NewConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewConnectionResponse_descriptor_;
}

const NewConnectionResponse& NewConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NewConnectionResponse* NewConnectionResponse::default_instance_ = NULL;

NewConnectionResponse* NewConnectionResponse::New() const {
  return new NewConnectionResponse;
}

void NewConnectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewConnectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewConnectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewConnectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewConnectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewConnectionResponse::MergeFrom(const NewConnectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewConnectionResponse::CopyFrom(const NewConnectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewConnectionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void NewConnectionResponse::Swap(NewConnectionResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewConnectionResponse_descriptor_;
  metadata.reflection = NewConnectionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseConnectionRequest::kConnKeyFieldNumber;
#endif  // !_MSC_VER

CloseConnectionRequest::CloseConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseConnectionRequest::InitAsDefaultInstance() {
}

CloseConnectionRequest::CloseConnectionRequest(const CloseConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseConnectionRequest::SharedCtor() {
  _cached_size_ = 0;
  conn_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseConnectionRequest::~CloseConnectionRequest() {
  SharedDtor();
}

void CloseConnectionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseConnectionRequest_descriptor_;
}

const CloseConnectionRequest& CloseConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CloseConnectionRequest* CloseConnectionRequest::default_instance_ = NULL;

CloseConnectionRequest* CloseConnectionRequest::New() const {
  return new CloseConnectionRequest;
}

void CloseConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conn_key_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 conn_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_key_)));
          set_has_conn_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 conn_key = 1;
  if (has_conn_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conn_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 conn_key = 1;
  if (has_conn_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conn_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 conn_key = 1;
    if (has_conn_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseConnectionRequest::MergeFrom(const CloseConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn_key()) {
      set_conn_key(from.conn_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseConnectionRequest::CopyFrom(const CloseConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CloseConnectionRequest::Swap(CloseConnectionRequest* other) {
  if (other != this) {
    std::swap(conn_key_, other->conn_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseConnectionRequest_descriptor_;
  metadata.reflection = CloseConnectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseConnectionResponse::kRcFieldNumber;
#endif  // !_MSC_VER

CloseConnectionResponse::CloseConnectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseConnectionResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

CloseConnectionResponse::CloseConnectionResponse(const CloseConnectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseConnectionResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseConnectionResponse::~CloseConnectionResponse() {
  SharedDtor();
}

void CloseConnectionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void CloseConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseConnectionResponse_descriptor_;
}

const CloseConnectionResponse& CloseConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CloseConnectionResponse* CloseConnectionResponse::default_instance_ = NULL;

CloseConnectionResponse* CloseConnectionResponse::New() const {
  return new CloseConnectionResponse;
}

void CloseConnectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseConnectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseConnectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseConnectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseConnectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseConnectionResponse::MergeFrom(const CloseConnectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseConnectionResponse::CopyFrom(const CloseConnectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseConnectionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void CloseConnectionResponse::Swap(CloseConnectionResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseConnectionResponse_descriptor_;
  metadata.reflection = CloseConnectionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataRequest::kConnKeyFieldNumber;
const int DataRequest::kDataFieldNumber;
#endif  // !_MSC_VER

DataRequest::DataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataRequest::InitAsDefaultInstance() {
}

DataRequest::DataRequest(const DataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataRequest::SharedCtor() {
  _cached_size_ = 0;
  conn_key_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataRequest::~DataRequest() {
  SharedDtor();
}

void DataRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRequest_descriptor_;
}

const DataRequest& DataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

DataRequest* DataRequest::default_instance_ = NULL;

DataRequest* DataRequest::New() const {
  return new DataRequest;
}

void DataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conn_key_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 conn_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_key_)));
          set_has_conn_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 conn_key = 1;
  if (has_conn_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conn_key(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 conn_key = 1;
  if (has_conn_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conn_key(), target);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 conn_key = 1;
    if (has_conn_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_key());
    }

    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn_key()) {
      set_conn_key(from.conn_key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataRequest::Swap(DataRequest* other) {
  if (other != this) {
    std::swap(conn_key_, other->conn_key_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRequest_descriptor_;
  metadata.reflection = DataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResponse::kRcFieldNumber;
#endif  // !_MSC_VER

DataResponse::DataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::proto::ResponseCode*>(&::proto::ResponseCode::default_instance());
}

DataResponse::DataResponse(const DataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResponse::~DataResponse() {
  SharedDtor();
}

void DataResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void DataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResponse_descriptor_;
}

const DataResponse& DataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

DataResponse* DataResponse::default_instance_ = NULL;

DataResponse* DataResponse::New() const {
  return new DataResponse;
}

void DataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::proto::ResponseCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ResponseCode rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ResponseCode rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ResponseCode rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResponse::MergeFrom(const DataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::proto::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResponse::CopyFrom(const DataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void DataResponse::Swap(DataResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResponse_descriptor_;
  metadata.reflection = DataResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
